{plugins,[{relup_helper,{git,"https://github.com/emqx/relup_helper",
                             {branch,"master"}}},
          {rebar3_run,{git,"https://github.com/emqx/rebar3_run",
                           {tag,"0.2.3"}}}]}.
{edge_relx_overlay,[]}.
{edoc_opts,[{preprocess,true}]}.
{erl_opts,[warn_unused_vars,warn_shadow_vars,warn_unused_import,
           warn_obsolete_guard,no_debug_info,compressed]}.
{overrides,[{add,[{erl_opts,[no_debug_info,compressed,
                             {parse_transform,mod_vsn}]}]}]}.
{xref_checks,[undefined_function_calls,undefined_functions,locals_not_used,
              deprecated_function_calls,warnings_as_errors,
              deprecated_functions]}.
{cover_enabled,true}.
{cover_opts,[verbose]}.
{cover_export_enabled,true}.
{provider_hooks,[{pre,[{release,{relup_helper,gen_appups}}]},
                 {post,[{release,{relup_helper,otp_vsn}},
                        {release,{relup_helper,untar}}]}]}.
{post_hooks,[{"(linux|darwin|solaris|freebsd|netbsd|openbsd)",compile,
              "./post-compile.sh"},
             {"win32",compile,"post-compile.cmd"}]}.

{profiles,
    [{'emqx',
        [{deps, []},
        {relx,
             ["?BASIC_RELX_PARAMS",
              {release, {emqx, "?GIT_DESC"}, ["?BASIC_RELX_APPS", "?CLOUD_RELX_APPS"]},
              {overlay, ["?BASIC_OVERLAY", "?CLOUD_OVERLAY"]},
              {overlay_vars,["vars-cloud.config","vars-bin.config"]}]}]},
     {'emqx-pkg',
         [{deps, []},
          {relx,
              ["?BASIC_RELX_PARAMS",
               {release, {emqx, "?GIT_DESC"}, ["?BASIC_RELX_APPS", "?CLOUD_RELX_APPS"]},
               {overlay, ["?BASIC_OVERLAY", "?CLOUD_OVERLAY"]},
               {overlay_vars,["vars-cloud.config","vars-pkg.config"]}]}]},
     {'emqx-edge',
         [{deps, []},
          {relx,
              ["?BASIC_RELX_PARAMS",
               {release, {emqx, "?GIT_DESC"}, ["?BASIC_RELX_APPS"]},
               {overlay, ["?BASIC_OVERLAY", "?EDGE_OVERLAY"]},
               {overlay_vars,["vars-edge.config","vars-bin.config"]}]}]},
     {'emqx-edge-pkg',
         [{deps, []},
          {relx,
              ["?BASIC_RELX_PARAMS",
               {release, {emqx, "?GIT_DESC"}, ["?BASIC_RELX_APPS"]},
               {overlay, ["?BASIC_OVERLAY", "?EDGE_OVERLAY"]},
               {overlay_vars,["vars-edge.config","vars-pkg.config"]}]}]}]}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Placeholders
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
{rebar_place_holders, [

{"BASIC_RELX_PARAMS", list_elems, fun(_Conf) ->
  [ {include_src,false}
  , {extended_start_script,false}
  , {generate_start_script,false}
  , {sys_config,false}
  , {vm_args,false}
  ]
end},

{"BASIC_RELX_APPS", list_elems, fun(_Conf) ->
  [ kernel
  , sasl
  , crypto
  , public_key
  , asn1
  , syntax_tools
  , ssl
  , os_mon
  , inets
  , compiler
  , runtime_tools
  , cuttlefish
  , emqx
  , {mnesia, load}
  , {ekka, load}
  , {emqx_retainer, load}
  , {emqx_management, load}
  , {emqx_dashboard, load}
  , {emqx_bridge_mqtt, load}
  , {emqx_sn, load}
  , {emqx_coap, load}
  , {emqx_stomp, load}
  , {emqx_auth_clientid, load}
  , {emqx_auth_username, load}
  , {emqx_auth_http, load}
  , {emqx_auth_mysql, load}
  , {emqx_auth_jwt, load}
  , {emqx_auth_mnesia, load}
  , {emqx_web_hook, load}
  , {emqx_recon, load}
  , {emqx_rule_engine, load}
  , {emqx_sasl, load}
  , {emqx_telemetry, load}
  ]
end},

{"CLOUD_RELX_APPS", list_elems, fun(_Conf) ->
  [ {emqx_lwm2m, load}
  , {emqx_auth_ldap, load}
  , {emqx_auth_pgsql, load}
  , {emqx_auth_redis, load}
  , {emqx_auth_mongo, load}
  , {emqx_lua_hook, load}
  , {emqx_extension_hook, load}
  , {emqx_exproto, load}
  , {emqx_prometheus, load}
  , {emqx_reloader, load}
  , {emqx_psk_file, load}
  , {emqx_plugin_template, load}
  , {observer, load}
  , luerl
  , xmerl
  ]
end},

{"BASIC_OVERLAY", list_elems, fun(_Conf) ->
   [ {mkdir,"etc/"}
   , {mkdir,"log/"}
   , {mkdir,"data/"}
   , {mkdir,"data/mnesia"}
   , {mkdir,"data/configs"}
   , {mkdir,"data/scripts"}
   , {template, "data/loaded_plugins.tmpl", "data/loaded_plugins"}
   , {template, "data/loaded_modules.tmpl", "data/loaded_modules"}
   , {template,"data/emqx_vars","releases/emqx_vars"}
   , {copy,"bin/emqx_env","bin/emqx_env"}
   , {copy,"bin/emqx","bin/emqx"}
   , {copy,"bin/emqx_ctl","bin/emqx_ctl"}
   , {copy,"bin/install_upgrade.escript", "bin/install_upgrade.escript"}
   , {copy,"bin/nodetool","bin/nodetool"}
   , {copy, "bin/cuttlefish","bin/cuttlefish"}
   , {copy,"bin/emqx.cmd","bin/emqx.cmd"}
   , {copy,"bin/emqx_ctl.cmd","bin/emqx_ctl.cmd"}
   , {copy,"bin/emqx","bin/emqx-{{rel_vsn}}"} %% for relup
   , {copy,"bin/emqx_ctl","bin/emqx_ctl-{{rel_vsn}}"} %% for relup
   , {copy,"bin/install_upgrade.escript", "bin/install_upgrade.escript-{{rel_vsn}}"} %% for relup
   , {copy,"bin/nodetool","bin/nodetool-{{rel_vsn}}"} %% for relup
   , {copy, "bin/cuttlefish","bin/cuttlefish-{{rel_vsn}}"}  %% for relup
   , {template,"etc/emqx.conf","etc/"}
   , {copy,"etc/schema/*.schema","releases/{{rel_vsn}}/schema/"}
   , {copy, "etc/certs","etc/"}
   ]
end},

{"CLOUD_OVERLAY", list_elems, fun(_Conf) ->
   [ {template,"etc/emqx_cloud.d/*.conf","etc/emqx.d/*.conf"}
   , {template,"etc/vm.args","etc/vm.args"}
   ]
end},

{"EDGE_OVERLAY", list_elems, fun(_Conf) ->
   [ {template,"etc/emqx_edge.d/*.conf","etc/emqx.d/*.conf"}
   , {template,"etc/vm.args.edge","etc/vm.args"}
   ]
end},

{"GIT_DESC", var, fun(_Conf) ->

  %% TODO: Move this func to a specific module
  ComparingFun = fun
    _Fun([C1|R1], [C2|R2]) when is_list(C1), is_list(C2);
                                is_integer(C1), is_integer(C2) -> C1 < C2 orelse _Fun(R1, R2);
    _Fun([C1|R1], [C2|R2]) when is_integer(C1), is_list(C2)    -> _Fun(R1, R2);
    _Fun([C1|R1], [C2|R2]) when is_list(C1), is_integer(C2)    -> true;
    _Fun(_, _) -> false
  end,
  SortFun = fun(T1, T2) ->
    C = fun(T) ->
          [case catch list_to_integer(E) of
              I when is_integer(I) -> I;
              _ -> E
            end || E <- re:split(string:sub_string(T, 2), "[.-]", [{return, list}])]
        end,
    ComparingFun(C(T1), C(T2))
  end,
  Tag = os:cmd("git describe --abbrev=0 --tags") -- "\n",
  LatestTagCommitId = os:cmd(io_lib:format("git rev-parse ~s", [Tag])) -- "\n",
  Tags = string:tokens(os:cmd(io_lib:format("git tag -l \"v*\" --points-at ~s", [LatestTagCommitId])), "\n"),
  LatestTag = lists:last(lists:sort(SortFun, Tags)),
  Branch = case os:getenv("GITHUB_RUN_ID") of
                  false -> os:cmd("git branch | grep -e '^*' | cut -d' ' -f 2") -- "\n";
                  _ -> re:replace(os:getenv("GITHUB_REF"), "^refs/heads/|^refs/tags/", "", [global, {return ,list}])
          end,
  GitRef =  case re:run(Branch, "master|^dev/|^hotfix/", [{capture, none}]) of
                match -> {branch, Branch};
                _ -> {tag, LatestTag}
            end,
  DefaultDepRef =
      case os:getenv("EMQX_DEPS_DEFAULT_VSN") of
          false -> GitRef; %% not set
          "" -> GitRef; %% set empty
          [] -> GitRef; %% set empty
          MaybeTag ->
              case re:run(MaybeTag, "^[ev0-9\]+\.\[0-9\]+\.*") of
                  nomatch -> {branch, MaybeTag};
                  _ -> {tag, MaybeTag}
              end
      end,
  T = case DefaultDepRef of
          {tag, EnvTag} -> EnvTag;
          _Else -> LatestTag
      end,
  re:replace(T, "v", "", [{return ,list}])
end}

]}.

